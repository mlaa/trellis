#!/bin/sh

## Copy restore files from off-site backup. Clone project, install dependencies
## and import restore files.

# Configuration
current_date=`date +%Y%m%d`
project_bin_dir="{{ www_root }}/{{ item.key }}/bin"
project_uploads_dir="{{ www_root }}/{{ item.key }}/uploads"
project_root_dir="{{ www_root }}/{{ item.key }}/current"
project_env_file="$project_root_dir/.env"
nginx_conf_dir="/etc/nginx/sites-available"
production_domain_regex="{{ item.value.env.wp_domain | regex_replace('\\.', '\\\\.') }}"

private_packages_local_dir="{{ private_packages_local_dir }}"
wordpress_config_local_dir="{{ wordpress_config_local_dir }}"

mysql_backup_s3_file="{{ mysql_backup_s3_dir }}/commons-db_$current_date.sql.gz"
wordpress_uploads_s3_dir="{{ wordpress_uploads_s3_dir }}"
private_packages_s3_dir="{{ private_packages_s3_dir }}"

# Make sure script is not run by root.
if [ "$(id -u)" = "0" ]; then
   echo "Do not run this script as root." 1>&2
   exit 1
fi

# Attempt to set git config.
if [ -z `git config --global --get user.name` ]; then
  git_username=`ssh git@github.com 2>&1 >/dev/null | grep -Po 'Hi [^!]+' | awk '{ print $2 }'`
  if [ -z "$git_username" ]; then
    read -p "Enter your git config username: " git_username
  fi
  if [ ! -z "$git_username" ]; then
    git config --global user.name "$git_username"
  fi
fi

if [ -z `git config --global --get user.email` ]; then
  git_email=`curl -s https://api.github.com/users/$git_username | grep -Po '"email": "[^"]+"' | awk '{ gsub(/"/, "", $2); print $2 }'`
  if [ -z "$git_email" ]; then
    read -p "Enter your git config e-mail: " git_email
  fi
  if [ ! -z "$git_email" ]; then
    git config --global user.email "$git_email"
  fi
fi

# Get FQDN.
fqdn=`hostname -f`

# If no TLD is present, use vagrant.dev.
case "$fqdn" in
  *.*)
    echo "FQDN: $fqdn" ;;
  *)
    fqdn=$fqdn.vagrant.dev
    echo "FQDN: $fqdn" ;;
esac

# Create project directory
mkdir -p $project_root_dir

# Download database backup.
echo "Downloading database backup...."
aws s3 cp $mysql_backup_s3_file /tmp/mysql.backup.sql.gz >> $project_bin_dir/import.log

# Update private packages.
echo "Updating private packages...."
aws s3 sync $private_packages_s3_dir $private_packages_local_dir --delete >> $project_bin_dir/import.log

# Clone project and install dependencies.
if [ ! -d "$project_root_dir/.git" ]; then
  echo "Cloning project repo..."
  cd $project_root_dir
  git init
  git remote add origin {{ item.value.repo }}
  git fetch --all
  git checkout -f -t origin/{{ item.value.repo_branch }}
  echo "Installing dependencies..."
  composer install --prefer-source
fi

# Update WP uploads.
echo "Updating WP uploads...."
mkdir -p $project_root_dir/web/app
for dir in blogs.dir uploads; do
  sudo aws s3 sync $wordpress_uploads_s3_dir/$dir $project_uploads_dir/$dir --delete >> $project_bin_dir/import.log
  rm -rf $project_root_dir/web/app/$dir
  ln -s $project_uploads_dir/$dir $project_root_dir/web/app/$dir
  sudo chown -R {{ web_user }}:{{ web_group }} $project_uploads_dir/$dir
done

# Extract database backup and replace existing database.
echo "Loading database backup...."
gunzip -c /tmp/mysql.backup.sql.gz | mysql {{ item.value.env.db_name }}

# Populate .env with development domain.
echo "Updating project environment...."
sed "s/$production_domain_regex/$fqdn/g" $wordpress_config_local_dir/{{ item.key }}/.env > $project_env_file

# Create wp-cli.local.yml with development domain.
echo "url: http://$fqdn" > $project_root_dir/wp-cli.local.yml

# Generate self-signed certificate.
sudo $project_bin_dir/self-signed-certificate.sh $fqdn >> $project_bin_dir/import.log

# Update nginx configuration to use development domain.
echo "Updating nginx configuration...."
for file in $nginx_conf_dir/*.conf; do
  sudo sed -i "s/$production_domain_regex/$fqdn/g" $file
done
sudo service nginx restart

# Update database to use development domain.
echo "Updating database...."
wp search-replace \
--skip-columns=guid \
--network \
--url="{{ item.value.env.wp_domain }}" \
--path="$project_root_dir/web/wp" \
"{{ item.value.env.wp_domain }}" "$fqdn" >> $project_bin_dir/import.log
