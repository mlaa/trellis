---

- name: "Composer | add global composer vendor binary path"
  become: "yes"
  lineinfile:
    dest="/etc/environment"
    regexp="^PATH=\"(((?!:~/.composer/vendor/bin).)*)\""
    line="PATH=\"\1:~/.composer/vendor/bin\""
    backrefs="yes"
  tags:
    - "composer"

- name: "Composer | install PHPUnit"
  shell: composer global require "phpunit/phpunit=@stable"
    creates="~/.composer/vendor/bin/phpunit"
  tags:
    - "composer"
    - "phpunit"

- name: "Composer | install PHPCS"
  shell: composer global require "squizlabs/php_codesniffer=@stable"
    creates="~/.composer/vendor/bin/phpcs"
  tags:
    - "composer"
    - "phpcs"

- name: "Composer | install PHPCS WP Coding Standards"
  git:
    repo="https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git"
    dest="/home/{{ admin_user }}/.config/phpcs"
  tags:
    - "composer"
    - "phpcs"

- name: "Composer | add PHPCS WP Coding Standards to PHPCS"
  shell: ~/.composer/vendor/bin/phpcs --config-set installed_paths ~/.phpcs
  register: "phpcs_wpcs_result"
  changed_when: "'added successfully' in phpcs_wpcs_result.stdout"
  failed_when: "'successfully' not in phpcs_wpcs_result.stdout"
  tags:
    - "composer"
    - "phpcs"

- name: "Composer | add aliases for PHPCS commands"
  lineinfile:
    dest="/home/{{ admin_user }}/.bashrc"
    line="alias {{ item.name }}='{{ item.command }}'"
    regexp="^alias {{ item.name }}="
    state="present"
    insertafter="EOF"
  with_items:
    - { name: "wpcs", command: "phpcs --standard=WordPress-Core,WordPress-Docs,WordPress-Extra" }
    - { name: "wpcs-core", command: "phpcs --standard=WordPress-Core" }
    - { name: "wpcbf", command: "phpcbf --standard=WordPress-Core,WordPress-Docs,WordPress-Extra" }
    - { name: "wpcbf-core", command: "phpcbf --standard=WordPress-Core" }

- name: "Composer | add GitHub access token"
  template:
    src="auth.json.j2"
    dest="/home/{{ admin_user }}/.config/composer/auth.json"
  when: "composer_github_access_token is defined"
  tags:
    - "composer"

- include: "prewarm.yml"
  when: "prewarm_composer_manifest is defined"
